app.module.ts


import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule } from '@angular/router';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { SidebarComponent } from './components/sidebar/sidebar.component';
import { TopbarComponent } from './components/topbar/topbar.component';
import { DashboardComponent } from './pages/dashboard/dashboard.component';
import { AnalyticsComponent } from './pages/analytics/analytics.component';
import { EcommerceComponent } from './pages/ecommerce/ecommerce.component';
import { CardsComponent } from './components/cards/cards.component';
import { ChartsComponent } from './components/charts/charts.component';
import { TableComponent } from './components/table/table.component';

@NgModule({
  declarations: [
    AppComponent,
    SidebarComponent,
    TopbarComponent,
    DashboardComponent,
    AnalyticsComponent,
    EcommerceComponent,
    CardsComponent,
    ChartsComponent,
    TableComponent
  ],
  imports: [
    BrowserModule,
    AppRoutingModule,
    RouterModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }






app-routing.module.ts




import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { DashboardComponent } from './pages/dashboard/dashboard.component';
import { AnalyticsComponent } from './pages/analytics/analytics.component';
import { EcommerceComponent } from './pages/ecommerce/ecommerce.component';

const routes: Routes = [
  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
  { path: 'dashboard', component: DashboardComponent },
  { path: 'analytics', component: AnalyticsComponent },
  { path: 'ecommerce', component: EcommerceComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }








services/theme.service.ts




import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class ThemeService {
  private currentTheme: 'light' | 'dark' = 'light';

  constructor() {
    // Check for saved theme or prefer-color-scheme
    const savedTheme = localStorage.getItem('theme') as 'light' | 'dark' || 
      (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
    this.setTheme(savedTheme);
  }

  getTheme(): 'light' | 'dark' {
    return this.currentTheme;
  }

  setTheme(theme: 'light' | 'dark'): void {
    this.currentTheme = theme;
    document.documentElement.setAttribute('data-theme', theme);
    localStorage.setItem('theme', theme);
  }

  toggleTheme(): void {
    this.setTheme(this.currentTheme === 'light' ? 'dark' : 'light');
  }
}





services/data.service.ts




import { Injectable } from '@angular/core';

export interface CardData {
  title: string;
  value: string;
  growth: string;
  positive: boolean;
  icon: string;
}

export interface Transaction {
  id: string;
  customer: string;
  date: string;
  amount: string;
  status: 'active' | 'pending' | 'inactive';
}

@Injectable({
  providedIn: 'root'
})
export class DataService {
  getCardData(): CardData[] {
    return [
      {
        title: 'Total Revenue',
        value: '$24,580',
        growth: '12.5% from last month',
        positive: true,
        icon: 'fa-dollar-sign'
      },
      {
        title: 'New Users',
        value: '1,248',
        growth: '8.2% from last month',
        positive: true,
        icon: 'fa-users'
      },
      {
        title: 'Orders',
        value: '356',
        growth: '3.4% from last month',
        positive: false,
        icon: 'fa-shopping-bag'
      },
      {
        title: 'Conversion Rate',
        value: '4.8%',
        growth: '1.2% from last month',
        positive: true,
        icon: 'fa-percentage'
      }
    ];
  }

  getTransactions(): Transaction[] {
    return [
      {
        id: '#TRX-7812',
        customer: 'John Smith',
        date: 'Jun 12, 2023',
        amount: '$248.00',
        status: 'active'
      },
      {
        id: '#TRX-7811',
        customer: 'Sarah Johnson',
        date: 'Jun 11, 2023',
        amount: '$189.50',
        status: 'pending'
      },
      {
        id: '#TRX-7810',
        customer: 'Michael Brown',
        date: 'Jun 10, 2023',
        amount: '$420.00',
        status: 'active'
      },
      {
        id: '#TRX-7809',
        customer: 'Emily Davis',
        date: 'Jun 9, 2023',
        amount: '$312.75',
        status: 'inactive'
      },
      {
        id: '#TRX-7808',
        customer: 'Robert Wilson',
        date: 'Jun 8, 2023',
        amount: '$156.20',
        status: 'active'
      }
    ];
  }
}








app.component.ts



import { Component, HostListener } from '@angular/core';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  title = 'dashboard';
  isMobileMenuOpen = false;

  @HostListener('window:resize', ['$event'])
  onResize(event: any) {
    // Close mobile menu on resize to desktop
    if (event.target.innerWidth > 992) {
      this.isMobileMenuOpen = false;
    }
  }

  toggleMobileMenu(): void {
    this.isMobileMenuOpen = !this.isMobileMenuOpen;
  }

  closeMobileMenu(): void {
    this.isMobileMenuOpen = false;
  }
}









app.component.html



<div class="app-container">
  <!-- Sidebar -->
  <app-sidebar 
    [isMobileMenuOpen]="isMobileMenuOpen"
    (closeMobileMenu)="closeMobileMenu()">
  </app-sidebar>

  <!-- Mobile Overlay -->
  <div 
    class="mobile-overlay" 
    [class.active]="isMobileMenuOpen"
    (click)="closeMobileMenu()">
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <!-- Topbar -->
    <app-topbar (toggleMobileMenu)="toggleMobileMenu()"></app-topbar>

    <!-- Router Outlet -->
    <div class="router-content">
      <router-outlet></router-outlet>
    </div>
  </div>
</div>





app.component.css



.app-container {
  display: flex;
  min-height: 100vh;
}

.main-content {
  flex: 1;
  margin-left: 240px;
  display: flex;
  flex-direction: column;
}

.router-content {
  flex: 1;
  overflow-y: auto;
}

.mobile-overlay {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  z-index: 999;
}

.mobile-overlay.active {
  display: block;
}

@media (max-width: 992px) {
  .main-content {
    margin-left: 0 !important;
  }
}






components/sidebar/sidebar.component.ts



import { Component, Input, Output, EventEmitter } from '@angular/core';

interface MenuItem {
  label: string;
  icon: string;
  route: string;
  active: boolean;
  submenu?: SubMenuItem[];
}

interface SubMenuItem {
  label: string;
  route: string;
  active: boolean;
}

@Component({
  selector: 'app-sidebar',
  templateUrl: './sidebar.component.html',
  styleUrls: ['./sidebar.component.css']
})
export class SidebarComponent {
  @Input() isMobileMenuOpen = false;
  @Output() closeMobileMenu = new EventEmitter<void>();

  menuItems: MenuItem[] = [
    {
      label: 'Dashboard',
      icon: 'fa-home',
      route: '/dashboard',
      active: true
    },
    {
      label: 'Analytics',
      icon: 'fa-chart-line',
      route: '/analytics',
      active: false,
      submenu: [
        { label: 'Reports', route: '/analytics/reports', active: true },
        { label: 'Statistics', route: '/analytics/statistics', active: false },
        { label: 'Charts', route: '/analytics/charts', active: false }
      ]
    },
    {
      label: 'E-commerce',
      icon: 'fa-shopping-cart',
      route: '/ecommerce',
      active: false,
      submenu: [
        { label: 'Products', route: '/ecommerce/products', active: false },
        { label: 'Orders', route: '/ecommerce/orders', active: false },
        { label: 'Customers', route: '/ecommerce/customers', active: false }
      ]
    },
    {
      label: 'Settings',
      icon: 'fa-cog',
      route: '/settings',
      active: false
    },
    {
      label: 'Profile',
      icon: 'fa-user',
      route: '/profile',
      active: false
    }
  ];

  toggleSubmenu(menuItem: MenuItem): void {
    if (menuItem.submenu) {
      // Close all other submenus
      this.menuItems.forEach(item => {
        if (item !== menuItem && item.submenu) {
          item.active = false;
        }
      });
      
      menuItem.active = !menuItem.active;
    } else {
      // Close mobile menu when clicking a menu item without submenu
      this.closeMobileMenu.emit();
    }
  }

  onSubmenuItemClick(): void {
    this.closeMobileMenu.emit();
  }
}






components/sidebar/sidebar.component.html


<div class="sidebar" [class.mobile-open]="isMobileMenuOpen">
  <div class="sidebar-header">
    <div class="logo">
      <i class="fas fa-chart-pie"></i>
      <span class="logo-text">Dashboard</span>
    </div>
  </div>
  
  <div class="sidebar-menu">
    <div 
      *ngFor="let item of menuItems" 
      class="menu-item" 
      [class.active]="item.active"
      (click)="toggleSubmenu(item)">
      <i class="fas" [class]="item.icon"></i>
      <span class="menu-text">{{ item.label }}</span>
      <i *ngIf="item.submenu" class="fas fa-chevron-down ml-auto"></i>
    </div>
    
    <div *ngFor="let item of menuItems">
      <div *ngIf="item.submenu" class="submenu" [class.open]="item.active">
        <div 
          *ngFor="let subItem of item.submenu" 
          class="submenu-item" 
          [class.active]="subItem.active"
          (click)="onSubmenuItemClick()">
          {{ subItem.label }}
        </div>
      </div>
    </div>
  </div>
</div>







components/sidebar/sidebar.component.css


.sidebar {
  width: 240px;
  height: 100vh;
  background: var(--surface);
  color: var(--text-primary);
  position: fixed;
  left: 0;
  top: 0;
  transition: var(--transition);
  overflow-x: hidden;
  z-index: 1000;
  border-right: 1px solid var(--border-color);
  display: flex;
  flex-direction: column;
}

.sidebar-header {
  padding: 24px 20px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-bottom: 1px solid var(--border-color);
  height: 70px;
}

.logo {
  display: flex;
  align-items: center;
  gap: 12px;
  font-weight: 700;
  font-size: 1.3rem;
  color: var(--text-primary);
}

.logo i {
  font-size: 1.5rem;
  color: var(--primary);
}

.sidebar-menu {
  padding: 20px 0;
  flex: 1;
}

.menu-item {
  padding: 12px 20px;
  display: flex;
  align-items: center;
  gap: 12px;
  cursor: pointer;
  transition: var(--transition);
  margin: 4px 12px;
  border-radius: 8px;
  color: var(--text-secondary);
}

.menu-item:hover {
  background: var(--primary-light);
  color: var(--primary);
}

.menu-item.active {
  background: var(--primary);
  color: white;
}

.menu-item i {
  font-size: 1.1rem;
  width: 20px;
  text-align: center;
}

.menu-text {
  transition: var(--transition);
  font-weight: 500;
}

.submenu {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease;
  margin-left: 20px;
}

.submenu.open {
  max-height: 300px;
}

.submenu-item {
  padding: 10px 16px 10px 32px;
  display: flex;
  align-items: center;
  gap: 10px;
  cursor: pointer;
  transition: var(--transition);
  font-size: 0.9rem;
  border-radius: 6px;
  margin: 2px 12px;
  color: var(--text-secondary);
}

.submenu-item:hover {
  background: var(--border-color);
}

.submenu-item.active {
  background: var(--primary-light);
  color: var(--primary);
  font-weight: 500;
}

.ml-auto {
  margin-left: auto;
}

@media (max-width: 992px) {
  .sidebar {
    transform: translateX(-100%);
    width: 280px;
  }
  
  .sidebar.mobile-open {
    transform: translateX(0);
  }
}






components/topbar/topbar.component.ts





import { Component, Output, EventEmitter, OnInit, OnDestroy } from '@angular/core';
import { ThemeService } from '../../services/theme.service';

@Component({
  selector: 'app-topbar',
  templateUrl: './topbar.component.html',
  styleUrls: ['./topbar.component.css']
})
export class TopbarComponent implements OnInit, OnDestroy {
  @Output() toggleMobileMenu = new EventEmitter<void>();
  
  currentDate = '';
  currentTime = '';
  greeting = 'Good Morning, Alex!';
  private timeInterval: any;

  constructor(private themeService: ThemeService) {}

  ngOnInit(): void {
    this.updateDateTime();
    this.updateGreeting();
    this.timeInterval = setInterval(() => {
      this.updateDateTime();
    }, 1000);
  }

  ngOnDestroy(): void {
    if (this.timeInterval) {
      clearInterval(this.timeInterval);
    }
  }

  updateDateTime(): void {
    const now = new Date();
    
    // Format date
    const options: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    this.currentDate = now.toLocaleDateString('en-US', options);
    
    // Format time
    let hours = now.getHours();
    let minutes = now.getMinutes();
    let seconds = now.getSeconds();
    const ampm = hours >= 12 ? 'PM' : 'AM';
    
    hours = hours % 12;
    hours = hours ? hours : 12;
    minutes = minutes < 10 ? '0' + minutes : minutes;
    seconds = seconds < 10 ? '0' + seconds : seconds;
    
    this.currentTime = `${hours}:${minutes}:${seconds} ${ampm}`;
  }

  updateGreeting(): void {
    const hour = new Date().getHours();
    
    if (hour < 12) {
      this.greeting = 'Good Morning, Alex!';
    } else if (hour < 18) {
      this.greeting = 'Good Afternoon, Alex!';
    } else {
      this.greeting = 'Good Evening, Alex!';
    }
  }

  getThemeIcon(): string {
    return this.themeService.getTheme() === 'light' ? 'fa-moon' : 'fa-sun';
  }

  toggleTheme(): void {
    this.themeService.toggleTheme();
  }

  onMobileToggle(): void {
    this.toggleMobileMenu.emit();
  }
}







components/topbar/topbar.component.html


<div class="topbar">
  <div class="topbar-left">
    <button class="mobile-toggle" (click)="onMobileToggle()">
      <i class="fas fa-bars"></i>
    </button>
    <div class="search-bar">
      <i class="fas fa-search"></i>
      <input type="text" placeholder="Search...">
    </div>
  </div>
  
  <div class="topbar-right">
    <button class="theme-toggle" (click)="toggleTheme()">
      <i class="fas" [class]="getThemeIcon()"></i>
    </button>
    <div class="greeting">{{ greeting }}</div>
    <div class="datetime">
      <div class="date">{{ currentDate }}</div>
      <div class="time">{{ currentTime }}</div>
    </div>
    <div class="user-profile">
      <div class="user-avatar">AJ</div>
    </div>
  </div>
</div>










components/topbar/topbar.component.css



.topbar {
  height: 70px;
  background: var(--surface);
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 30px;
  border-bottom: 1px solid var(--border-color);
  position: sticky;
  top: 0;
  z-index: 100;
}

.topbar-left {
  display: flex;
  align-items: center;
  gap: 20px;
}

.mobile-toggle {
  display: none;
  background: none;
  border: none;
  color: var(--text-secondary);
  font-size: 1.2rem;
  cursor: pointer;
  width: 32px;
  height: 32px;
  align-items: center;
  justify-content: center;
  border-radius: 6px;
}

.mobile-toggle:hover {
  background: var(--border-color);
}

.search-bar {
  display: flex;
  align-items: center;
  background: var(--bg-color);
  border-radius: 10px;
  padding: 10px 16px;
  width: 320px;
  border: 1px solid var(--border-color);
}

.search-bar:focus-within {
  border-color: var(--primary);
}

.search-bar input {
  border: none;
  background: none;
  outline: none;
  margin-left: 10px;
  width: 100%;
  font-size: 0.95rem;
  color: var(--text-primary);
}

.search-bar input::placeholder {
  color: var(--text-secondary);
}

.topbar-right {
  display: flex;
  align-items: center;
  gap: 24px;
}

.theme-toggle {
  background: none;
  border: none;
  color: var(--text-secondary);
  font-size: 1.2rem;
  cursor: pointer;
  transition: var(--transition);
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 6px;
}

.theme-toggle:hover {
  background: var(--border-color);
  color: var(--primary);
}

.datetime {
  display: flex;
  flex-direction: column;
  align-items: flex-end;
}

.date {
  font-size: 0.85rem;
  color: var(--text-secondary);
}

.time {
  font-weight: 600;
  font-size: 1.1rem;
  color: var(--text-primary);
}

.greeting {
  font-weight: 600;
  font-size: 1.1rem;
  color: var(--text-primary);
}

.user-profile {
  display: flex;
  align-items: center;
  gap: 10px;
  cursor: pointer;
}

.user-avatar {
  width: 38px;
  height: 38px;
  border-radius: 50%;
  background: var(--primary);
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 600;
  font-size: 0.9rem;
}

@media (max-width: 768px) {
  .topbar {
    padding: 0 20px;
  }
  
  .search-bar {
    width: 200px;
  }
  
  .greeting {
    display: none;
  }
  
  .mobile-toggle {
    display: flex;
  }
}

@media (max-width: 576px) {
  .topbar {
    padding: 0 15px;
  }
  
  .search-bar {
    width: 150px;
  }
  
  .datetime {
    display: none;
  }
}







components/cards/cards.component.ts



import { Component, Input } from '@angular/core';
import { CardData } from '../../services/data.service';

@Component({
  selector: 'app-cards',
  templateUrl: './cards.component.html',
  styleUrls: ['./cards.component.css']
})
export class CardsComponent {
  @Input() cards: CardData[] = [];
  @Input() bigCard = false;
}







components/cards/cards.component.html


<div class="cards-row">
  <div 
    *ngFor="let card of cards" 
    class="card" 
    [class.big-card]="bigCard">
    <div class="card-header">
      <div class="card-title">{{ card.title }}</div>
      <div class="card-icon">
        <i class="fas" [class]="card.icon"></i>
      </div>
    </div>
    <div class="card-value">{{ card.value }}</div>
    <div class="card-growth" [class.growth-positive]="card.positive" [class.growth-negative]="!card.positive">
      <i class="fas" [class]="card.positive ? 'fa-arrow-up' : 'fa-arrow-down'"></i>
      {{ card.growth }}
    </div>
  </div>
</div>





components/cards/cards.component.css




.cards-row {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 20px;
  margin-bottom: 30px;
}

.card {
  background: var(--surface);
  border-radius: 12px;
  padding: 24px;
  box-shadow: var(--card-shadow);
  transition: var(--transition);
  border: 1px solid var(--border-color);
}

.card:hover {
  box-shadow: var(--hover-shadow);
}

.card-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 16px;
}

.card-title {
  font-size: 0.9rem;
  color: var(--text-secondary);
  font-weight: 500;
}

.card-icon {
  width: 40px;
  height: 40px;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--primary);
  background: var(--primary-light);
}

.card-value {
  font-size: 1.8rem;
  font-weight: 700;
  margin-bottom: 8px;
  color: var(--text-primary);
}

.card-growth {
  font-size: 0.85rem;
  display: flex;
  align-items: center;
  gap: 5px;
}

.growth-positive {
  color: var(--success);
}

.growth-negative {
  color: var(--danger);
}

.big-card {
  grid-column: span 2;
}

@media (max-width: 1200px) {
  .cards-row {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 768px) {
  .cards-row {
    grid-template-columns: 1fr;
  }
  
  .big-card {
    grid-column: span 1;
  }
}

@media (max-width: 576px) {
  .card {
    padding: 20px;
  }
  
  .cards-row {
    gap: 15px;
  }
}




components/charts/charts.component.ts


import { Component, AfterViewInit, Input } from '@angular/core';
import { ThemeService } from '../../services/theme.service';

@Component({
  selector: 'app-charts',
  templateUrl: './charts.component.html',
  styleUrls: ['./charts.component.css']
})
export class ChartsComponent implements AfterViewInit {
  @Input() chartType: 'performance' | 'sales' | 'traffic' | 'revenue' = 'performance';
  @Input() title = 'Chart';

  private chart: any;

  constructor(private themeService: ThemeService) {}

  ngAfterViewInit(): void {
    this.initChart();
    
    // Update chart when theme changes
    this.themeService.setTheme(this.themeService.getTheme());
  }

  private initChart(): void {
    const canvas = document.getElementById(this.chartType + 'Chart') as HTMLCanvasElement;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // Chart.js initialization based on chart type
    switch (this.chartType) {
      case 'performance':
        this.createPerformanceChart(ctx);
        break;
      case 'sales':
        this.createSalesChart(ctx);
        break;
      case 'traffic':
        this.createTrafficChart(ctx);
        break;
      case 'revenue':
        this.createRevenueChart(ctx);
        break;
    }
  }

  private createPerformanceChart(ctx: CanvasRenderingContext2D): void {
    // Performance chart implementation
    // Similar to the Chart.js code from the original implementation
  }

  private createSalesChart(ctx: CanvasRenderingContext2D): void {
    // Sales chart implementation
  }

  private createTrafficChart(ctx: CanvasRenderingContext2D): void {
    // Traffic chart implementation
  }

  private createRevenueChart(ctx: CanvasRenderingContext2D): void {
    // Revenue chart implementation
  }
}










components/table/table.component.ts



import { Component, Input } from '@angular/core';
import { Transaction } from '../../services/data.service';

@Component({
  selector: 'app-table',
  templateUrl: './table.component.html',
  styleUrls: ['./table.component.css']
})
export class TableComponent {
  @Input() transactions: Transaction[] = [];
  @Input() title = 'Recent Transactions';

  getStatusClass(status: string): string {
    switch (status) {
      case 'active': return 'status status-active';
      case 'pending': return 'status status-pending';
      case 'inactive': return 'status status-inactive';
      default: return 'status';
    }
  }

  getStatusText(status: string): string {
    switch (status) {
      case 'active': return 'Completed';
      case 'pending': return 'Pending';
      case 'inactive': return 'Cancelled';
      default: return status;
    }
  }
}














pages/dashboard/dashboard.component.ts



import { Component, OnInit } from '@angular/core';
import { DataService, CardData } from '../../services/data.service';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {
  cards: CardData[] = [];
  transactions: any[] = [];

  constructor(private dataService: DataService) {}

  ngOnInit(): void {
    this.cards = this.dataService.getCardData();
    this.transactions = this.dataService.getTransactions();
  }
}




pages/dashboard/dashboard.component.html



<div class="dashboard-content">
  <h2 class="section-title">Dashboard Overview</h2>
  
  <!-- Cards Row -->
  <app-cards [cards]="cards"></app-cards>
  
  <!-- Big Card and Table Row -->
  <div class="cards-row">
    <div class="card big-card">
      <div class="card-header">
        <div class="card-title">Performance Overview</div>
      </div>
      <div class="chart-container" style="padding: 0; border: none; box-shadow: none;">
        <canvas id="performanceChart"></canvas>
      </div>
    </div>
    
    <app-table [transactions]="transactions" title="Recent Transactions"></app-table>
  </div>
  
  <!-- Charts Row -->
  <div class="chart-row">
    <app-charts chartType="sales" title="Sales Overview"></app-charts>
    <app-charts chartType="traffic" title="Traffic Sources"></app-charts>
    <app-charts chartType="revenue" title="Revenue by Category"></app-charts>
  </div>
</div>






styles.css

/* Global CSS Variables and Styles */
:root {
  --primary: #10B981;
  --primary-light: #D1FAE5;
  --secondary: #6B7280;
  --accent: #3B82F6;
  --light: #F8FAFC;
  --dark: #1E293B;
  --gray: #6B7280;
  --gray-light: #CBD5E1;
  --success: #10B981;
  --warning: #F59E0B;
  --danger: #EF4444;
  --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);

  /* Light theme colors */
  --bg-color: #EDEFF2;
  --surface: #F8FAFC;
  --text-primary: #1E293B;
  --text-secondary: #6B7280;
  --border-color: #CBD5E1;
  --card-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  --hover-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

[data-theme="dark"] {
  --bg-color: #111827;
  --surface: #1F2937;
  --text-primary: #F3F4F6;
  --text-secondary: #9CA3AF;
  --border-color: #374151;
  --card-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
  --hover-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  --primary-light: #065F46;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
}

body {
  background-color: var(--bg-color);
  color: var(--text-primary);
  transition: var(--transition);
}

/* Common dashboard styles */
.dashboard-content {
  padding: 30px;
  flex: 1;
}

.section-title {
  margin-bottom: 24px;
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--text-primary);
}

.chart-container {
  background: var(--surface);
  border-radius: 12px;
  padding: 24px;
  box-shadow: var(--card-shadow);
  margin-bottom: 30px;
  border: 1px solid var(--border-color);
}

.chart-row {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 20px;
  margin-bottom: 30px;
}

.chart-title {
  font-size: 1rem;
  font-weight: 600;
  margin-bottom: 16px;
  color: var(--text-primary);
}

.table-container {
  background: var(--surface);
  border-radius: 12px;
  padding: 24px;
  box-shadow: var(--card-shadow);
  margin-bottom: 30px;
  border: 1px solid var(--border-color);
  overflow-x: auto;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: 14px 16px;
  text-align: left;
  border-bottom: 1px solid var(--border-color);
}

th {
  font-weight: 600;
  color: var(--text-secondary);
  font-size: 0.85rem;
}

td {
  font-size: 0.9rem;
  color: var(--text-primary);
}

.status {
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 500;
}

.status-active {
  background: rgba(16, 185, 129, 0.1);
  color: var(--success);
}

.status-pending {
  background: rgba(245, 158, 11, 0.1);
  color: var(--warning);
}

.status-inactive {
  background: rgba(239, 68, 68, 0.1);
  color: var(--danger);
}

/* Responsive Design */
@media (max-width: 1200px) {
  .chart-row {
    grid-template-columns: 1fr 1fr;
  }
}

@media (max-width: 992px) {
  .cards-row {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .big-card {
    grid-column: span 2;
  }
}

@media (max-width: 768px) {
  .dashboard-content {
    padding: 20px;
  }
  
  .chart-row {
    grid-template-columns: 1fr;
  }
  
  .cards-row {
    grid-template-columns: 1fr;
  }
  
  .big-card {
    grid-column: span 1;
  }
}




  
